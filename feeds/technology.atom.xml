<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Matteo's Website - Technology</title><link href="https:/" rel="alternate"></link><link href="https:///feeds/technology.atom.xml" rel="self"></link><id>https:/</id><updated>2023-05-01T00:00:00-04:00</updated><entry><title>An Overview Of My Wine AI</title><link href="https:///an-overview-of-my-wine-ai.html" rel="alternate"></link><published>2023-05-01T00:00:00-04:00</published><updated>2023-05-01T00:00:00-04:00</updated><author><name>Matteo Raso</name></author><id>tag:None,2023-05-01:/an-overview-of-my-wine-ai.html</id><summary type="html">&lt;p&gt;I decided to make an AI that predicts the quality of red wine recently.
The first step I took was to remove unnecessary features, which I did by 
using an ANOVA test. I found that residual sugars didn't have an impact on 
wine quality, so I removed it to make …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I decided to make an AI that predicts the quality of red wine recently.
The first step I took was to remove unnecessary features, which I did by 
using an ANOVA test. I found that residual sugars didn't have an impact on 
wine quality, so I removed it to make my data less sparse. After that, I 
removed the wines with a quality of 3, 4, and 8. The rationale was that 
there should be 10 observations per feature, which means a minimum of 100 
observations a label. There were less than 100 wines with a quality of 3, 
4, and 8 combined, so they weren't usable. After that, I used a Knn 
algorithm to classify them. It took a bit of playing around with the code, 
but I was able to get an AI that recorded an accuracy of 72.5%. Based on 
looking through the code of other people who used the same dataset, it 
seems that this is something of a higher limit for accuracy with this 
dataset.&lt;/p&gt;</content><category term="Technology"></category></entry><entry><title>Nope, Not Done Ranting About Laptops Yet</title><link href="https:///nope-not-done-ranting-about-laptops-yet.html" rel="alternate"></link><published>2023-04-29T00:00:00-04:00</published><updated>2023-04-29T00:00:00-04:00</updated><author><name>Matteo Raso</name></author><id>tag:None,2023-04-29:/nope-not-done-ranting-about-laptops-yet.html</id><summary type="html">&lt;p&gt;After uploading &lt;a href="https://matteoraso.github.io/do-laptops-even-die-or-why-you-shouldnt-throw-out-your-laptop.html#do-laptops-even-die-or-why-you-shouldnt-throw-out-your-laptop"&gt;yesterday's post&lt;/a&gt;, I learned that laptops aren't repairable anymore because they're so thin nowadays. To make them that thin, laptop manufacturers customize the hardware components, making it impossible to change or upgrade. I noticed that SATA hard drives aren't used anymore in laptops, which means that I can't …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After uploading &lt;a href="https://matteoraso.github.io/do-laptops-even-die-or-why-you-shouldnt-throw-out-your-laptop.html#do-laptops-even-die-or-why-you-shouldnt-throw-out-your-laptop"&gt;yesterday's post&lt;/a&gt;, I learned that laptops aren't repairable anymore because they're so thin nowadays. To make them that thin, laptop manufacturers customize the hardware components, making it impossible to change or upgrade. I noticed that SATA hard drives aren't used anymore in laptops, which means that I can't just get a cheap drive and put it in my laptop, which is my main way of saving money when I buy a computer. Not only that, but you can't get a good cooling system in a thin laptop, because size = power for fans. If you didn't read my post yesterday, the only reason I'm even looking for a new laptop is because my current laptop's cooling system is dying. Why are laptop manufacturers screwing over their customers like this? Is there some huge demand for thin laptops that I don't know about? I know that the average consumer doesn't look too closely at the way that their laptop was built, but I'm sure that they would rather have a good laptop than a thin one, if they were forced to pick. At this point, I think I'm going to start advising people to only use their old laptops for as long as possible.&lt;/p&gt;</content><category term="Technology"></category></entry><entry><title>Do Laptops Even Die? (or, Why You Shouldn't Throw Out Your Laptop)</title><link href="https:///do-laptops-even-die-or-why-you-shouldnt-throw-out-your-laptop.html" rel="alternate"></link><published>2023-04-28T00:00:00-04:00</published><updated>2023-04-28T00:00:00-04:00</updated><author><name>Matteo Raso</name></author><id>tag:None,2023-04-28:/do-laptops-even-die-or-why-you-shouldnt-throw-out-your-laptop.html</id><summary type="html">&lt;p&gt;My laptop isn't in the best of shape (i.e. it's in the active process of dying), so I've found myself window browsing laptops a fair bit. Every time that I do, I always come back to the feeling that I don't really have to do this. If you look …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My laptop isn't in the best of shape (i.e. it's in the active process of dying), so I've found myself window browsing laptops a fair bit. Every time that I do, I always come back to the feeling that I don't really have to do this. If you look online, the conventional wisdom is that the average lifespan of a laptop is 3-5 years. My laptop is 4 years old, so about the time you would expect for it to die, if you follow the conventional wisdom. The thing is, I don't. My hot take is that even a cheap laptop should last you 10 years if you maintain the hardware components well. From what I can tell, when people say that their laptop is dead, they don't actually mean that it died, they just mean that it's slow. The few articles that explained why laptops only last 3-5 years follow the same line of thought, saying that laptops have to be replaced after that amount of time because the hardware wouldn't be able to keep up with Windows updates. Well, I use Linux, so that's not a problem for me. The main reason why my laptop is dying is that the fans are failing, which threatens to make my already hot computer have uncontrollable thermals eventually. With the way my fans sound, that might happen in a month, but my laptop might stabilize and crawl along for up to a year. Again, still within the 3-5 year estimated lifespan, but not for the reasons that are usually given. Also, it ignores the circumstances behind my laptop failing. I'll admit it, I did not take good care of this thing. I knew that this laptop had bad thermals, but I never even attempted to change the thermal paste until after my computer was no longer able to keep the CPU temperature below 95 C, which it was idling at for years. I'm not talking about normal years, I'm talking about culmative years of usage. I play a lot of games that benefit from AFKing, so I would just leave my laptop running over night, every night, for about 2 years, never dipping below 95 C. All in all, I'd say that my laptop's fans have done about a decade's worth of work in the past 4 years. While I couldn't replace the thermal paste because the screws holding my fan down have seized, I was able to get the heat down by cleaning up the dust that built up inside, removing the battery (which was generating a ton of heat and could barely hold a charge anymore), and getting a cooling pad. I know that not being able to change the thermal paste will come back to bite me down the line, but at least I bought my laptop a month (and counting). &lt;/p&gt;
&lt;p&gt;I think that's why I've been a bit obsessed with laptop life expectancy for the past few weeks. Being able to buy at least another month from worn-out fans is impressive, and exactly what every tech article says that I shouldn't be able to do. I suppose I shouldn't be surprised, because the tech articles aren't written for more advanced laptop users that want to extend their laptop lifespan as much as possible, they're written for a broad audience that wants the best user experience. I get it, but I don't like it. Replacing a laptop is expensive, contributes to e-waste, and probably means getting a laptop that's lower quality than your current one (looking over all the laptops I've seen online, I haven't seen a single good one). Compared to that, spending $50-70 on peripherals to keep my laptop running for a bit longer is a no-brainer.&lt;/p&gt;
&lt;p&gt;I haven't even gotten into replacements for hardware components yet. While I would never even think about trying this, I've seen people with my exact same type of laptop add a water-cooling system to keep a temperatures down better than a fan ever could. A less extreme example would be replacing the hard drive or RAM as your needs evolve. That's how the used Thinkpad community stays thriving despite everybody there using a laptop that's over 10 years old, although a lot of them have replaced so many components, they ended up with a laptop of Theseus that may or may not be the original laptop. Whatever the case may be, it's clear that laptops are a lot more durable than people give them credit for, as long as you're willing to put in a bit of effort to keep them running.&lt;/p&gt;
&lt;p&gt;Personally, I plan on using a laptop that's already 10 years old as my daily driver once my current one is unusable. For some reason I don't understand, my mom has kept my sister's old laptop from 2012 hidden away for all these years, so I took it to use as a secondary laptop, not realizing how good it is. Like most laptops from that time period, it has a much better build quality than laptops made nowadays. On top of that, the specs are surprisingly good. A 1 TB hard drive, decent CPU, and only 4 GB of RAM, but an option to upgrade to 8 GB (don't buy the fear-mongering about needing 16 GB of RAM, 8 GB is plenty for most people). I've already played around with it, and it's nice and responsive. With a bit of maintenance, I expect that laptop to last me for years to come.&lt;/p&gt;</content><category term="Technology"></category></entry><entry><title>Rust Broke My Manjaro Installation (And How I Fixed It)</title><link href="https:///rust-broke-my-manjaro-installation-and-how-i-fixed-it.html" rel="alternate"></link><published>2023-04-24T00:00:00-04:00</published><updated>2023-04-24T00:00:00-04:00</updated><author><name>Matteo Raso</name></author><id>tag:None,2023-04-24:/rust-broke-my-manjaro-installation-and-how-i-fixed-it.html</id><summary type="html">&lt;p&gt;You ever have a bad day and think to yourself "I really just want to play old Flash games right now?" I did last night, so I attempted to install a CLI Flash emulator called Ruffle. This is built on top of Rust, so I had to install that as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You ever have a bad day and think to yourself "I really just want to play old Flash games right now?" I did last night, so I attempted to install a CLI Flash emulator called Ruffle. This is built on top of Rust, so I had to install that as well. Unfortunately, I was having trouble with Rust not finding a file called "cargo.toml", so I uninstalled Rust. When I went to boot up my laptop today, I found that my computer was getting stuck at the login GUI. I could enter the password, but when it would go to log me in, it froze for a second and brought me back to the GUI. After doing some digging in the TTY, I discovered that this was happening because bash was looking for .cargo/env, which no longer existed. Reinstalling Rust didn't help either, so I fixed the bug by manually creating a ".cargo" directory and adding an env file. Bash executes whatever's written in this file every time you open a terminal, so I just wrote "sleep 0". I know that there's probably a better way to do this, but my internet's out right now and I don't feel like spending time fighting with my computer over something I've already jerryrigged a solution for.&lt;/p&gt;</content><category term="Technology"></category></entry><entry><title>A Weird Image Compression Program</title><link href="https:///a-weird-image-compression-program.html" rel="alternate"></link><published>2023-04-23T00:00:00-04:00</published><updated>2023-04-23T00:00:00-04:00</updated><author><name>Matteo Raso</name></author><id>tag:None,2023-04-23:/a-weird-image-compression-program.html</id><summary type="html">&lt;p&gt;If you're like me, you clogged up your entire hard drive with memes. I decided that I needed to clean up my computer a bit, so instead of doing the sensible thing and delete as many memes as I could bear, I decided to code an image compression program to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you're like me, you clogged up your entire hard drive with memes. I decided that I needed to clean up my computer a bit, so instead of doing the sensible thing and delete as many memes as I could bear, I decided to code an image compression program to free up space without degrading quality too much. I came up with this convoluted plan to convert images into 3D fourier transforms, remove low-frequency waves, and then convert back into an image. That was a bust, but I did notice something interesting. When I converted an image into a 3D array and converted it back into an image, the size went down without me actually doing anything to the image. I don't know why that happens, but I suspect it's at least partially because any metadata that the picture has is erased. The degree of compression depends on the image, but I've gotten over &amp;gt;80% reduction of size with particularly large and detailed images. For all the jpgs in my main directory, the total size went from 224 MB to 130 MB after compressing, a nice &amp;gt;40% reduction. The only problem is that some images end up completely destroyed. I don't know what causes it, but it seems to have to do with images being almost completely black to begin with. Still, I'm very pleased with the results.&lt;/p&gt;</content><category term="Technology"></category></entry><entry><title>An Unusual Git Error I Got, And How to Fix it</title><link href="https:///an-unusual-git-error-i-got-and-how-to-fix-it.html" rel="alternate"></link><published>2023-04-16T00:00:00-04:00</published><updated>2023-04-16T00:00:00-04:00</updated><author><name>Matteo Raso</name></author><id>tag:None,2023-04-16:/an-unusual-git-error-i-got-and-how-to-fix-it.html</id><summary type="html">&lt;p&gt;Note: This article was originally written on Feburary 21, 2021.&lt;/p&gt;
&lt;p&gt;I was working on this game I've been programming for a while when I decided to add a little feature to let the player check how good the armor that they're wearing actually is. I commit, check the 'git status' …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Note: This article was originally written on Feburary 21, 2021.&lt;/p&gt;
&lt;p&gt;I was working on this game I've been programming for a while when I decided to add a little feature to let the player check how good the armor that they're wearing actually is. I commit, check the 'git status' to see if there was anything that I was missing, found nothing, and pushed to my Github repo. All in all, a pretty normal experience, until I noticed an extremely abnormal bug. Instead of pushing my code, Git said "fatal: unable to read 'messed_up_hash'". For some reason I still don't understand, Git expected the commit to be under a different hash than the one it was actually under. A bit unusual, so I look up solutions. I find several solutions to fix corrupted objects, but none of them worked for me, since they assume that the hash is actually there (I checked my .git directory, there really wasn't a hash there). This brought me to what looked like the only solution I hadn't tried: delete the repo, pull from Github, and accept losing your unpushed commits. This isn't exactly a bad solution, since it works and it's easy to do, but it assumes best practice. I have (or at least had, now that this scare has fixed me up) a habit where I let commits pile up before pushing. This is not best practice. I had 8 commits piled up, one of which was extremely important and took a considerable amount of time to figure out. Dumping it wasn't an option as far as I'm concerned.&lt;/p&gt;
&lt;p&gt;Here I decided to keep looking for solutions to my problem. Thankfully, I found one other person who had my exact same problem: Jim Schubert.  In a 2012 post on &lt;a href="https://www.ipreferjim.com/2012/02/git-push-fatal-unable-to-read-sha1/"&gt;his website&lt;/a&gt;, almost down to the exact same day that I had the problem, Jim outlines a way to fix the problem by writing the hash to Git. It's a reasonable fix, but with one problem: it didn't work on my repo. Again, no idea why, since there's no reason why it wouldn't work, but computers don't always act in logical ways. Yet again, I had to search for answers.&lt;/p&gt;
&lt;p&gt;Suddenly, it hit me: why not just get rid of the commit? I use 'git reset' to remove it, only to find out that it needs the non-existent hash in order to remove it. Great. At this point, I'm trying to find out how to remove a commit without directly interacting with the commit when I finally find my solution: backup the problematic file, use 'git rm' to get rid of it, use your text editor of choice on the copy to undo whatever changes you made, rename the copy as the original file, use 'git add', and then run 'git commit --amend --allow-empty'. Your commit still stays, and will probably always stay, but now Git won't give you any problems about missing hashes. After running those commands, I was finally able to push to my Github repo. Here's hoping I never have to do this again.&lt;/p&gt;</content><category term="Technology"></category></entry><entry><title>Free Software Isn't Free</title><link href="https:///free-software-isnt-free.html" rel="alternate"></link><published>2023-04-16T00:00:00-04:00</published><updated>2023-04-16T00:00:00-04:00</updated><author><name>Matteo Raso</name></author><id>tag:None,2023-04-16:/free-software-isnt-free.html</id><summary type="html">&lt;p&gt;Note: This article was originally written on December, 12, 2020.&lt;/p&gt;
&lt;p&gt;The title for this post sounds like a contradiction. How can something be free yet not free? That's because English is a little bit weird. Other languages (like Italian) don't have a word for free. Most romance languages have a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Note: This article was originally written on December, 12, 2020.&lt;/p&gt;
&lt;p&gt;The title for this post sounds like a contradiction. How can something be free yet not free? That's because English is a little bit weird. Other languages (like Italian) don't have a word for free. Most romance languages have a word called (or derived from) "gratis", which refers to no price, and a word called (or dervived from) "libre", which means no restrictions. You've probably noticed that many free software have "libre" in their name. That's because the "free" in free software is about the freedom given to the user, not that the software is gratis. When I say "Free software isn't free", I mean that libre software isn't gratis and gratis software isn't free.&lt;/p&gt;
&lt;p&gt;Of course, there are times when software is both libre and gratis. I'm not entirely sure I've ever seen libre software that wasn't also gratis, although I've seen many, many software that is gratis but not libre. I feel like this ambiguity has actually been one of the biggest barriers to widespread adoption of free software. I constantly see criticism of free software from people saying that you're the product when you use free software, people saying that free software advocates are just cheap, and even people saying that free software is communist. At the same time, programmers feel like it's not worth their time to program free software, because they think it's gratis and programmers obviously have to get paid if they want it to be a full-time job. Don't get me wrong, I love that I don't really have to pay for any of my software, but being gratis is just a secondary benefit of free software. If the Linux Foundation were to turn around tomorrow and say that they were going to charge people a fee to use any future version of the kernel (and they absolutely could under the GPL), I would probably pay for it. That's because what I ultimately want is software that respects my freedoms as a consumer.&lt;/p&gt;
&lt;p&gt;According the the Free Software Foundation, free software has to obey four freedoms: the user must be able to use it however they want, the user must be allowed to study the source code, the user must be allowed to redistribute the software, and the user must be able to modify the software. You don't even need to make the code open-source, since the GPL itself even says that it's okay to make the code available to customers on request only, so long as you don't charge more than the cost to send it to them. These aren't radical new freedoms, if you really think about it. Let's say you buy a record player (if they even still make those). Obviously, the company can't sell it to you if it doesn't work, and the customer can always use it in unconventional ways like using it as a really large paperweight or for benchpressing without restriction by the company, so it follows freedom 0. If the customer wants, they can always take the record player apart and see how it works inside, so we also have freedom 1. You can always give it away or sell it if you don't want it anymore without restriction, so the user also has freedom 2. Finally, the user can make a new piece for the record player in his very convienent blacksmithing forge and use it to modify the record player, so the user has freedom 4. The idea that a customer wouldn't be able to have all four of these freedoms is a pretty new idea, and one that I don't like.&lt;/p&gt;
&lt;p&gt;Of course, software is different from a record player, since a record player requires a lot more effort to duplicate than software. However, people have had a long history of distributing intellectual property. Every library you go to is based on the belief that books can and should be available to everybody free of charge. In fact, libraries even profit off of books by charging fees if you don't return them in time. Now that we have ebooks, libraries even give away the books for the "borrower" to keep, free of charge. In many ways, librarians were the free software advocates before software was invented. Of course, people have been able to get software for free (gratis) for a long time now, thanks to torrenting. Still, the companies who made the software (or the song, game, movie, etc etc) still do just fine, because a significant amount of people still choose to buy the software out of ethical reasons. Removing restrictions on redistributing software shouldn't change this all that much. If somebody takes your software and improves it by such a significant amount that people buy their version instead of yours, then it's your fault for releasing an inferior product and you should release a new patch so your software is even better than the fork. That's just how the free market works, baby. Either way, the consumers come out on top from this, since the increased competion means that companies have no choice but to make their software even better instead of staying mediocre.&lt;/p&gt;
&lt;p&gt;Ultimately, the biggest problem with non-libre software is that you're the product. Just look at Windows. Even though you pay for it (probably not directly, but it's bundled into the cost of your computer), it still gives you ads and comes pre-installed with awful games that paid off Microsoft. Not only that, they collect your data through telemetry to use for market research and then sell it to all sorts of companies who also want to use your data to study. You are paying to be a walking commodity for massive corporations who risk YOUR data being stolen or falling into the wrong hands so THEY can turn a profit. You can't do that with free software. If somebody tries to create software that shoves unskippable ads down your throat or steals your data, then somebody will modify the software to disable these features and distribute their version themselves. Maybe you disagree with me, and that's okay. All I know is is that my experience with computers have gotten much better since I've started to use free software.&lt;/p&gt;</content><category term="Technology"></category></entry></feed>